# Node.js

# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

variables:
  - group: Default Variable Group

trigger:
  - master
  - develop
  - feature/*
  - release/*
  - greenkeeper/*

pool:
  vmImage: 'ubuntu-latest'

jobs:
  - job: buildAndTest    
    timeoutInMinutes: 10
    displayName: Build and test
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '12.x'
        displayName: 'Install Node.js'
      # - script: yarn install
      #   displayName: 'Yarn install'

      # - script: yarn lint
      #   displayName: 'Yarn Lint'

      # - script: yarn build
      #   displayName: 'Yarn build'

      # - task: DockerCompose@0
      #   displayName: Start the Dev Proxy Image
      #   inputs:
      #     action: Run services
      #     dockerComposeFile: '$(System.DefaultWorkingDirectory)/docker-compose.yml'
      #     projectName: $(Build.Repository.Name)
      #     detached: true
      #     buildImages: true

      # - script: yarn test:cypress
      #   displayName: 'Cypress tests'

      # - task: PublishTestResults@2
      #   displayName: Publish test results
      #   condition: always()
      #   inputs:
      #     testRunner: JUnit
      #     testResultsFiles: '$(System.DefaultWorkingDirectory)/testresults/output.xml'
      # - task: PublishBuildArtifacts@1
      #   displayName: Publish Cypress test artifacts
      #   condition: failed()
      #   inputs:
      #     pathtoPublish: '$(System.DefaultWorkingDirectory)/cypress/videos'
      #     artifactName: cypress_videos

  - deployment: deploy
    displayName: Deploy images
    dependsOn: buildAndTest
    timeoutInMinutes: 10
    environment:
      name: Live
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - script: ls -a
            - task: Docker@2
              displayName: Login to Docker
              inputs:
                command: login
                containerRegistry: dockerHubServiceConnection
            - task: Docker@2
              displayName: Build base docker image
              inputs:
                command: buildAndPush
                containerRegistry: dockerHubServiceConnection
                Dockerfile: base.dockerfile
                repository: furystack
                tags: multiverse-base:latest
            - task: Docker@2
              displayName: Build WrapR docker image
              inputs:
                command: buildAndPush
                containerRegistry: dockerHubServiceConnection
                Dockerfile: wrapr.dockerfile
                repository: furystack
                tags: multiverse-wrap-r:latest
            - task: Docker@2
              displayName: Build LoggR docker image
              inputs:
                command: buildAndPush
                containerRegistry: dockerHubServiceConnection
                Dockerfile: loggr.dockerfile
                repository: furystack
                tags: multiverse-logg-r:latest
