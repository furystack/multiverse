# Node.js

# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

variables:
  - group: Default Variable Group

trigger:
  - master
  - develop
  - feature/*
  - release/*

pool:
  vmImage: 'ubuntu-latest'

jobs:
  - job: buildAndTest
    variables:
      YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
    timeoutInMinutes: "15"
    displayName: Build and test
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
        displayName: 'Install Node.js'
      - task: Cache@2
        inputs:
          key: 'yarn | "$(Agent.OS)" | yarn.lock'
          restoreKeys: |
            yarn | "$(Agent.OS)"
            yarn
          path: $(YARN_CACHE_FOLDER)
        displayName: Cache Yarn packages
      - script: yarn install --frozen-lockfile
        displayName: 'Yarn install'
      - script: yarn lint
        displayName: 'Yarn Lint'
      - script: yarn build
        displayName: 'Yarn build'
        env:
          RELATIVE_CI_SLUG: furystack/multiverse
      - task: DockerCompose@0
        displayName: Start docker services
        inputs:
          action: Run services
          dockerComposeFile: '$(System.DefaultWorkingDirectory)/docker-compose.yml'
          projectName: $(Build.Repository.Name)
          detached: true
          buildImages: true
      - script: yarn test:unit
        displayName: 'Jest tests'
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish test coverage results'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/*coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'
      - task: PublishTestResults@1
        displayName: Publish test results
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: '$(System.DefaultWorkingDirectory)/coverage/junit.xml'

      - script: yarn test:cypress
        displayName: 'Cypress tests'
      - task: PublishTestResults@1
        displayName: Publish test results
        condition: always()
        inputs:
          testRunner: JUnit
          testResultsFiles: '$(System.DefaultWorkingDirectory)/testresults/output-**.xml'
      - task: PublishBuildArtifacts@1
        displayName: Publish Cypress videos
        condition: failed()
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/cypress/videos'
          ArtifactName: cypress_videos
      - task: PublishBuildArtifacts@1
        displayName: Publish Cypress snapshot images
        condition: failed()
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/cypress/integration/__image_snapshots__'
          ArtifactName: cypress_snapshots

  - deployment: deploy
    displayName: Deploy images to Docker HUB
    variables:
      YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
    dependsOn: buildAndTest
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    timeoutInMinutes: "60"
    environment:
      name: DockerHub
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: NodeTool@0
              inputs:
                versionSpec: '14.x'
              displayName: 'Install Node.js'
            - task: Cache@2
              inputs:
                key: 'yarn | "$(Agent.OS)" | yarn.lock'
                restoreKeys: |
                  yarn | "$(Agent.OS)"
                  yarn
                path: $(YARN_CACHE_FOLDER)
              displayName: Cache Yarn packages
            - script: yarn install --frozen-lockfile
              displayName: 'Yarn install'
            - script: yarn build
              displayName: 'Yarn build'
            - task: Docker@2
              displayName: Login to Docker
              inputs:
                command: login
                containerRegistry: dockerHubServiceConnection
            - script: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
              displayName: Pull docker quemi image for buildx
            - script: docker buildx create --name builder --driver docker-container --node build --driver-opt network=host --use
              displayName: Create new buildx builder
            - script: docker buildx inspect --bootstrap
              displayName: Bootstrap BuildX builder
            - script: docker buildx build --platform linux/arm/v7,linux/arm64,linux/amd64 --file ./frontend-core.Dockerfile --tag furystack/multiverse-frontend-core:latest . --push
              displayName: Build Frontend-Core image
            - script: docker buildx build --platform linux/arm/v7,linux/arm64,linux/amd64 --file ./base.Dockerfile --tag furystack/multiverse-base:latest . --push
              displayName: Build Base image
            - script: docker buildx build --platform linux/arm/v7,linux/arm64,linux/amd64 --file ./auth.Dockerfile --tag furystack/multiverse-auth:latest . --push
              displayName: Build Auth image
            - script: docker buildx build --platform linux/arm/v7,linux/arm64,linux/amd64 --file ./dashboard.Dockerfile --tag furystack/multiverse-dashboard:latest . --push
              displayName: Build Dashboard image
            - script: docker buildx build --platform linux/arm/v7,linux/arm64,linux/amd64 --file ./diag.Dockerfile --tag furystack/multiverse-diag:latest . --push
              displayName: Build Diag image
            - script: docker buildx build --platform linux/arm/v7,linux/arm64,linux/amd64 --file ./media.Dockerfile --tag furystack/multiverse-media:latest . --push
              displayName: Build Media image
            - script: docker buildx build --platform linux/arm/v7,linux/arm64,linux/amd64 --file ./media-encoder.Dockerfile --tag furystack/multiverse-media-encoder:latest . --push
              displayName: Build Media Encoder worker image
            - script: docker buildx build --platform linux/arm/v7,linux/arm64,linux/amd64 --file ./xpense.Dockerfile --tag furystack/multiverse-xpense:latest . --push
              displayName: Build Xpense image
