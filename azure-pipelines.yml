# Node.js

# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

variables:
  - group: Default Variable Group

trigger:
  - master
  - develop
  - feat/*
  - feature/*
  - release/*

pool:
  vmImage: 'ubuntu-latest'

jobs:
  - job: installAndBuild
    timeoutInMinutes: 10
    displayName: Install, build, test
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
        displayName: 'Install Node.js'
      - script: yarn install
        displayName: 'Yarn install'
      - script: yarn lint
        displayName: 'Yarn Lint'
      - script: yarn build
        displayName: 'Yarn build'
        env:
          RELATIVE_CI_SLUG: furystack/multiverse
          GITHUB_CLIENT_ID: $(GITHUB_CLIENT_ID)
          GOOGLE_CLIENT_ID: $(GOOGLE_CLIENT_ID)
      - task: CopyFiles@2
        displayName: 'Create Archive directory'
        inputs:
          Contents: |
            common/config/**
            common/models/**
            common/service-utils/**
            frontends/core/bundle/**
            services/**
            workers/**
            package.json
            nginx.conf
          TargetFolder: '$(System.DefaultWorkingDirectory)/archive'
      - task: ArchiveFiles@1
        displayName: Create archive package
        inputs:
          archiveFile: package
          archiveType: 7z
          includeRootFolder: false
          rootFolder: $(System.DefaultWorkingDirectory)/archive
      - task: PublishBuildArtifacts@1
        displayName: Publish package artifact
        inputs:
          ArtifactName: BuildArtifacts
          PathtoPublish: $(System.DefaultWorkingDirectory)/package.7z
      - task: DockerCompose@0
        displayName: Start docker services
        inputs:
          action: Run services
          dockerComposeFile: '$(System.DefaultWorkingDirectory)/docker-compose.yml'
          projectName: $(Build.Repository.Name)
          detached: true
          buildImages: true
      - script: yarn test:cypress
        displayName: 'Cypress tests'
      - task: PublishTestResults@2
        displayName: Publish test results
        condition: always()
        inputs:
          testRunner: JUnit
          testResultsFiles: '$(System.DefaultWorkingDirectory)/testresults/output.xml'
      - task: PublishBuildArtifacts@1
        displayName: Publish Cypress test artifacts
        condition: failed()
        inputs:
          pathtoPublish: '$(System.DefaultWorkingDirectory)/cypress/videos'
          artifactName: cypress_videos

  - deployment: deploy
    displayName: 'Deploy to multiverse.my.to'
    dependsOn: E2ETests,UnitTests
    timeoutInMinutes: 10
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    variables:
      - group: multiverse
    environment:
      name: multiverse
    strategy:
      runOnce:
        deploy:
          steps:
            - download: current
              artifact: BuildArtifacts

            - task: CopyFilesOverSSH@0
              displayName: Copy package to target
              inputs:
                sshEndpoint: 'multiverse.my.to'
                overwrite: true
                contents: package.7z
                targetFolder: ~/apps/multiverse

            - task: SSH@0
              displayName: Decompress package
              timeoutInMinutes: 10
              inputs:
                sshEndpoint: 'multiverse.my.to'
                commands: 'cd ~/apps/multiverse && 7z x package.7z -y -bb'

            - task: SSH@0
              displayName: Update Nginx config
              inputs:
                sshEndpoint: 'multiverse.my.to'
                commands: 'cd ~/apps/multiverse && sudo cp nginx.conf /etc/nginx/ '

            - task: SSH@0
              displayName: Slim Install on server
              inputs:
                sshEndpoint: 'multiverse.my.to'
                commands: 'cd ~/apps/multiverse && yarn install --production=true --ignore-optional 2> >(grep -v warning 1>&2) '

            - task: SSH@0
              displayName: Restart services
              inputs:
                sshEndpoint: 'multiverse.my.to'
                commands: 'sudo systemctl start multiverse-auth && sudo systemctl start multiverse-diag && sudo systemctl start multiverse-xpense && sudo systemctl start multiverse-media && sudo systemctl start nginx'
