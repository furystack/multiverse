# Node.js

# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

variables:
  - group: Default Variable Group

trigger:
  - master
  - develop
  - feature/*
  - release/*
  - greenkeeper/*

pool:
  vmImage: 'ubuntu-latest'

jobs:
  - job: buildAndTest
    timeoutInMinutes: 10
    displayName: Build and test
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '12.x'
        displayName: 'Install Node.js'
      - script: yarn install
        displayName: 'Yarn install'
      - script: yarn lint
        displayName: 'Yarn Lint'
      - script: yarn build
        displayName: 'Yarn build'
        env:
          RELATIVE_CI_SLUG: furystack/multiverse
      - task: DockerCompose@0
        displayName: Start the Dev Proxy Image
        inputs:
          action: Run services
          dockerComposeFile: '$(System.DefaultWorkingDirectory)/docker-compose.yml'
          projectName: $(Build.Repository.Name)
          detached: true
          buildImages: true
      - script: yarn test:cypress
        displayName: 'Cypress tests'
      - task: PublishTestResults@2
        displayName: Publish test results
        condition: always()
        inputs:
          testRunner: JUnit
          testResultsFiles: '$(System.DefaultWorkingDirectory)/testresults/output.xml'
      - task: PublishBuildArtifacts@1
        displayName: Publish Cypress test artifacts
        condition: failed()
        inputs:
          pathtoPublish: '$(System.DefaultWorkingDirectory)/cypress/videos'
          artifactName: cypress_videos

  # ToDO: Revisit this after multi platform Docker build
  # - deployment: deploy
  #   displayName: Deploy images to Docker HUB
  #   dependsOn: buildAndTest
  #   timeoutInMinutes: 10
  #   environment:
  #     name: DockerHub
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #           - checkout: self
  #           - script: ls -a
  #           - task: Docker@2
  #             displayName: Login to Docker
  #             inputs:
  #               command: login
  #               containerRegistry: dockerHubServiceConnection
  #           - task: Docker@2
  #             displayName: Build base docker image
  #             inputs:
  #               command: buildAndPush
  #               containerRegistry: dockerHubServiceConnection
  #               Dockerfile: base.Dockerfile
  #               repository: furystack/multiverse-base
  #               tags: latest
  #           - task: Docker@2
  #             displayName: Build Auth docker image
  #             inputs:
  #               command: buildAndPush
  #               containerRegistry: dockerHubServiceConnection
  #               Dockerfile: auth.Dockerfile
  #               repository: furystack/multiverse-wrap-r
  #               tags: latest
  #           - task: Docker@2
  #             displayName: Build Diag docker image
  #             inputs:
  #               command: buildAndPush
  #               containerRegistry: dockerHubServiceConnection
  #               Dockerfile: diag.Dockerfile
  #               repository: furystack/multiverse-diag
  #               tags: latest
  #           - task: Docker@2
  #             displayName: Build Xpense docker image
  #             inputs:
  #               command: buildAndPush
  #               containerRegistry: dockerHubServiceConnection
  #               Dockerfile: diag.Dockerfile
  #               repository: furystack/multiverse-xpense
  #               tags: latest
  
  - deployment: deploy
    displayName: "Deploy to multiverse.my.to"
    dependsOn: buildAndTest
    timeoutInMinutes: 10
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    environment:
      name: multiverse
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - script: ls -a
          - task: NodeTool@0
            inputs:
              versionSpec: '12.x'
            displayName: 'Install Node.js'
          - script: yarn install --ignore-optional
            displayName: 'Yarn install'
          - script: yarn build
            displayName: Yarn Build
          - script: yarn install --production=true --ignore-optional
            displayName: Slim install
          - task: ArchiveFiles@1
            displayName: Create package archive
            inputs:
              archiveFile: package
              archiveType: 7z
              rootFolder: $(System.DefaultWorkingDirectory)
              includeRootFolder: true
          - task: PublishBuildArtifacts@1
            displayName: Publish package artifact
            inputs:
              ArtifactName: BuildArtifacts
              PathtoPublish: $(System.DefaultWorkingDirectory)/package.7z

          - task: CopyFilesOverSSH@0
            displayName: Copy package to target
            inputs:
              sshEndpoint: "multiverse.my.to"
              overwrite: true
              sourceFolder: $(System.DefaultWorkingDirectory)/package.7z
              targetFolder: ~/apps/multiverse
          
          - task: SSH@0
            displayName: Restart services on target
            inputs:
              sshEndpoint: "multiverse.my.to"
              commands: "sudo systemctl restart multiverse-auth && sudo systemctl restart multiverse-diag && sudo systemctl restart multiverse-xpense"